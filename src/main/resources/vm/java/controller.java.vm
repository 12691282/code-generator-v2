package ${packageName}.controller;

import java.util.List;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import lombok.extern.slf4j.Slf4j;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiImplicitParam;

import ${packageName}.domain.${domainClassName};
import ${packageName}.service.${serviceClassName};



//TODO 返回类型待加入

/**
 * ${functionName}Controller
 * 
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${businessName}")
@Api("${functionName}")
@Slf4j
public class ${ClassName}Controller
{
    @Autowired
    private ${serviceClassName} ${className}Service;

    /**
     * 查询${functionName}列表
     */
    @PostMapping("list")
    @ApiOperation("查询${functionName}列表")
    @ApiImplicitParams(
            {@ApiImplicitParam(name="${className}", value = "查询${functionName}列表", dataType = "${domainClassName}")}
    )
    public List<${domainClassName}> list(@RequestBody(required = false) ${domainClassName} ${className})
    {
        log.info("${className} : {}", ${className});
        List<${domainClassName}> list = ${className}Service.select${domainClassName}List(${className});
        return list;
    }

    /**
     * 获取${functionName}详细信息
     */
    @GetMapping(value = "{${pkColumn.javaField}}")
    @ApiOperation("获取${functionName}详细信息")
    @ApiImplicitParams(
            {@ApiImplicitParam(name="${pkColumn.javaField}", value = "获取${functionName}详细信息", dataType = "${pkColumn.javaType}")}
    )
    public ${domainClassName} getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField})
    {
        log.info("${pkColumn.javaField} : {}", ${pkColumn.javaField});
        return ${className}Service.select${domainClassName}ById(${pkColumn.javaField});
    }

    /**
     * 新增${functionName}
     */
    @PostMapping("add")
    @ApiOperation("新增${functionName}")
    @ApiImplicitParams(
            {@ApiImplicitParam(name="${className}", value = "新增${functionName}", dataType = "${domainClassName}")}
    )
    public int add(@RequestBody ${domainClassName} ${className})
    {
        log.info("${className} : {}", ${className});
    #if(!$pkColumn.isIncrementField() && $pkColumn.javaType == "String")
        #set($AttrName=$pkColumn.javaField.substring(0,1).toUpperCase() + ${pkColumn.javaField.substring(1)})
    ${className}.set$AttrName(java.util.UUID.randomUUID())//设置uuid为主键
    #end
    return ${className}Service.insert${domainClassName}(${className});
    }

    /**
     * 修改${functionName}
     */
    @PostMapping("edit")
    @ApiOperation("修改${functionName}")
    @ApiImplicitParams(
            {@ApiImplicitParam(name="${className}", value = "修改${functionName}", dataType = "${domainClassName}")}
    )
    public int edit(@RequestBody ${domainClassName} ${className})
    {
        log.info("${className} : {}", ${className});
        return ${className}Service.update${domainClassName}(${className});
    }

    /**
     * 删除${functionName}
     */
	@PostMapping("remove")
    @ApiOperation("删除${functionName}")
    @ApiImplicitParams(
            {@ApiImplicitParam(name="${pkColumn.javaField}s", value = "删除${functionName}", dataType = "${pkColumn.javaType}[]")}
    )
    public int remove(@RequestBody ${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
        log.info("${pkColumn.javaField}s : {}", ${pkColumn.javaField}s);
        return ${className}Service.delete${domainClassName}ByIds(${pkColumn.javaField}s);
    }
}
